<#@ output extension=".cs" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Global
// ReSharper disable CommentTypo
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using ORBIS.Basis;
using ORBIS.Basis.Entities;

[assembly: ProxyTypesAssembly]
namespace <#= Context.Namespace #>
{
<# foreach (var entity in Context.Entities) { #>
	#region <#=entity.MappedName#> 
<#	if (entity.States != null) { #>
	[DataContract]
	public enum <#=entity.StateName#>
	{
<# foreach (var itm in entity.States.Items) {#>
		[EnumMember] <#=itm.Name#> = <#=itm.Value#>,
<#}#>
	}
<#}#>

	/// <summary>
	/// <#=entity.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t/// ") #>
	/// </summary>
	[DataContract]
	[EntityLogicalName(EntityLogicalName)]
	public partial class <#=entity.MappedName#> : EntityBase
	{	
		public <#=entity.MappedName#>() : base(EntityLogicalName) { }
		public <#=entity.MappedName#>(Guid id) : base(EntityLogicalName, id) { }

		public const int EntityTypeCode = <#=entity.TypeCode#>;
		public const string EntityLogicalName = "<#=entity.LogicalName#>";
		public const string EntityIdAttribute = "<#=entity.PrimaryKey.LogicalName#>";		
		public const string EntityNameAttribute = "<#=entity.PrimaryNameAttribute ?? string.Empty#>";
		
		public override string IdAttribute => EntityIdAttribute;		
		public override string NameAttribute => EntityNameAttribute;
				
		[AttributeLogicalName(EntityIdAttribute)]
		public override System.Guid Id
		{
			get
			{
<# if(entity.PrimaryKey.IsValidForCreate) { #>
				if (base.Id == default(Guid))
					base.Id = <#=entity.PrimaryKey.MappedName#>.GetValueOrDefault();
<# } #>
				return base.Id;
			}
			set =><# if(entity.PrimaryKey.IsValidForCreate) { #> <#=entity.PrimaryKey.MappedName#> = value; <# } else { #> base.Id = value; <# } #>			
		}
<#	foreach(var attribute in entity.Fields)	{#>
<# if(attribute.Attribute.IsEntityReferenceHelper != true) { #>
<# if(attribute.Description != "") { #>
		/// <summary>
		/// <#=attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #>
		/// </summary>
<# } #>
		[AttributeLogicalName(Fields.<#=attribute.MappedName#>)]
<# if(attribute.IsDeprecated) { #>
				[System.Obsolete]
<# } #>
		public <#=attribute.TargetTypeForCrmSvcUtil#> <#=attribute.MappedName#><# if(attribute.IsOptionSet) { #>Option<# } #>
		{
<# if(attribute.IsActivityParty) { #>
				get
				{
					EntityCollection collection = GetAttributeValue<EntityCollection>(Fields.<#=attribute.MappedName#>);
					return collection?.Entities?.Cast<ActivityParty>();					
				}
<# if(attribute.IsValidForUpdate == true || attribute.IsValidForCreate == true) { #>
				set
				{
					OnPropertyChanging("<#=attribute.MappedName#>");
					var collection = value == null ? null : new EntityCollection(new List<Entity>(value));
					SetAttributeValue(Fields.<#=attribute.MappedName#>, collection);
					OnPropertyChanged("<#=attribute.MappedName#>");
				}
<# } #>
<# } else if(attribute.IsStateCode) { #>
				get
				{
					OptionSetValue optionSet = GetAttributeValue<OptionSetValue>(Fields.<#=attribute.MappedName#>);
					return optionSet == null ? null : (<#=entity.StateName#>?) optionSet.Value;
				}
<# if(attribute.IsValidForUpdate == true || attribute.IsValidForCreate == true) { #>
				set
				{
					OnPropertyChanging("<#=attribute.MappedName#>");
					OptionSetValue optionSet = ToOptionSetValue(value);
					SetAttributeValue(Fields.<#=attribute.MappedName#>, optionSet);
					OnPropertyChanged("<#=attribute.MappedName#>");
				}
<# } #>
<# } else { #>
			get => GetAttributeValue<<#=attribute.TargetTypeForCrmSvcUtil#>>(Fields.<#=attribute.MappedName#>); 
<# // if(attribute.IsValidForUpdate == true || attribute.IsValidForCreate == true || attribute == entity.PrimaryKey) { #>
<# if(attribute.IsValidForUpdate == true || attribute.IsValidForCreate == true) { #>
			set
			{
				OnPropertyChanging("<#=attribute.MappedName#>");
				SetAttributeValue(Fields.<#=attribute.MappedName#>, value);
<# if(attribute == entity.PrimaryKey) { #>
				base.Id = value.GetValueOrDefault();				
<#}#>
				OnPropertyChanged("<#=attribute.MappedName#>");
			}
<#}#>
<#}#>
		}
	
<# if(attribute.IsOptionSet) { #>
		[AttributeLogicalName(Fields.<#=attribute.MappedName#>)]
		public virtual Enums.<#=attribute.MappedName #>? <#=attribute.MappedName #>
		{
			get => (Enums.<#=attribute.MappedName #>?)GetEnum(Fields.<#=attribute.MappedName#>); 
<# if(attribute.IsValidForUpdate == true || attribute.IsValidForCreate == true) { #>
			set => <#=attribute.MappedName#>Option = ToOptionSetValue(value); 
<#}#>
		}
<#}#>
<#}#>
<#}#>
		public class Enums 
		{
<#foreach(var enm in entity.Enums)
{	
	if(enm.IsTwoOption) 
		continue;
#>  
			[DataContract]
			public enum <#=enm.MappedName #>  <#= enm.GlobalName != null ? ("// global: " + enm.GlobalName) :  string.Empty#>
			{
<#foreach(var item in enm.Items){#>
				[EnumMember] <#= item.Name #> = <#= item.Value #>,
<#}#>
			}		
<#}#>
		}

		public static class OptionSets
		{
<#foreach(var f in entity.Fields){ 
	if(f.IsOptionSet) {#>
			public const string <#=f.MappedName#> = "<#=f.EnumData.GlobalName#>";   <#= f.EnumData.IsGlobal == false ? "// local:"  + f.Attribute.LogicalName : string.Empty #>
<#	}
}#>
		}

		public new static partial class Fields
		{		
<#foreach(var f in entity.Fields){#>
			public const string <#=f.MappedName#> = "<#=f.Attribute.LogicalName#>";
<#}#>
		}		
	}
	#endregion <#=entity.MappedName#>

<#}#>
	
	#region Context
	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	public partial class XrmContext : XrmContextBase
	{
<# foreach (var entity in Context.Entities){#>
		/// <summary>
		/// Gets a binding to the set of all <see cref="<#=entity.MappedName#>"/> entities.
		/// </summary>
		public IQueryable<<#=entity.MappedName#>> <#=entity.MappedName#>Set	=> CreateQuery<<#=entity.MappedName#>>();
			
<#}#>
	}	
	
	public static partial class OptionSets
	{
<#foreach(var e in Context.Enums){#>
		public const string <#=e.GlobalName#> = "<#=e.GlobalName#>"; 
<#}#>	
		public static string[] All = new []{
<#foreach(var e in Context.Enums){#>
			<#=e.GlobalName#>,			//  <#=e.MappedName#>
<#}#>	
		};
	
	}	
	#endregion Context
}
