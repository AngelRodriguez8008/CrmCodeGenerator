<#@ output extension=".cs" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]
namespace <#= Context.Namespace #>
{
<# foreach (var entity in Context.Entities) { #>
<#	if (entity.States != null) { #>

// entity.Fields:<#=entity.Fields.Length#>
// RelationshipsOneToMany: <#=entity.RelationshipsOneToMany.Length#>
// RelationshipsManyToOne:<#=entity.RelationshipsManyToOne.Length#>

	[System.Runtime.Serialization.DataContractAttribute()]
	public enum <#=entity.StateName#>
	{
<# foreach (var itm in entity.States.Items) { #>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		<#=itm.Name#> = <#=itm.Value#>,
<#}#>
	}
<#}#>

	[System.Runtime.Serialization.DataContractAttribute()]
	[EntityLogicalNameAttribute("<#=entity.LogicalName#>")]
	public partial class <#=entity.HybridName#> : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		public <#=entity.HybridName#>()
			: base(EntityLogicalName)
		{
		}

		public const string EntityLogicalName = "<#=entity.LogicalName#>";
		public const int EntityTypeCode = <#=entity.TypeCode#>;
	
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
	
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}

		[AttributeLogicalNameAttribute("<#=entity.LogicalName#>id")]
		public override Guid Id
		{
			get { return base.Id; }
			set { this.<#=entity.PrimaryKey.DisplayName#> = value; }
		}

<#	foreach(var attribute in entity.Fields)	{#>
<#		if(attribute.Attribute.IsEntityReferenceHelper != true) { #>

		[AttributeLogicalNameAttribute("<#=attribute.Attribute.LogicalName#>")]
        public <#=attribute.TargetTypeForCrmSvcUtil#> <#=attribute.DisplayName#>
		{
<# if(attribute.IsActivityParty) { #>
			get
			{
				Microsoft.Xrm.Sdk.EntityCollection collection = this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityCollection>("<#=attribute.Attribute.LogicalName#>");
				if (((collection != null) && (collection.Entities != null)))
				{
					return System.Linq.Enumerable.Cast<ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("<#=attribute.DisplayName#>");
				if ((value == null))
				{
					this.SetAttributeValue("<#=attribute.Attribute.LogicalName#>", value);
				}
				else
				{
					this.SetAttributeValue("<#=attribute.Attribute.LogicalName#>", new Microsoft.Xrm.Sdk.EntityCollection(new System.Collections.Generic.List<Microsoft.Xrm.Sdk.Entity>(value)));
				}
				this.OnPropertyChanged("<#=attribute.DisplayName#>");
			}
<# } else if(attribute.IsStateCode) { #>
			get
			{
				Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("<#=attribute.Attribute.LogicalName#>");
				if ((optionSet != null))
				{
					return ((<#=entity.StateName#>)(System.Enum.ToObject(typeof(<#=entity.StateName#>), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
<# } else { #>
			get { return this.GetAttributeValue<<#=attribute.TargetTypeForCrmSvcUtil#>>("<#=attribute.Attribute.LogicalName#>"); }
<# if(attribute.IsValidForUpdate == true || attribute.IsValidForCreate == true || attribute == entity.PrimaryKey) { #>
			set 
			{ 
				this.OnPropertyChanging("<#=attribute.DisplayName#>");
				this.SetAttributeValue("<#=attribute.Attribute.LogicalName#>", value); 
<# if(attribute == entity.PrimaryKey) { #>
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
<#}#>
				this.OnPropertyChanged("<#=attribute.DisplayName#>");
			}
<#}#>
<#}#>
		}
<#}#>
<#}#>
<# //BEGIN// 1:N Realationships  #>
<#	foreach(var attribute in entity.RelationshipsOneToMany)	{#>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("<#=attribute.DisplayName#>")]
		public System.Collections.Generic.IEnumerable<<#=attribute.ToEntity.DisplayName#>> <#=attribute.DisplayName#>
		{
			get
			{
				return this.GetRelatedEntities<<#=attribute.ToEntity.DisplayName#>>("<#=attribute.DisplayName#>", null);
			}
			set
			{
				this.OnPropertyChanging("<#=attribute.DisplayName#>");
				this.SetRelatedEntities<<#=attribute.ToEntity.DisplayName#>>("<#=attribute.DisplayName#>", null, value);
				this.OnPropertyChanged("<#=attribute.DisplayName#>");
			}
		}
<#}#>
<# 
//END// 1:N Realationships

//BEGIN// N:1 Realationships 
	foreach(var attribute in entity.RelationshipsManyToOne)	{
#>
		/// <summary>
		/// N:1 <#=attribute.DisplayName#>
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("<#=attribute.Attribute.FromKey#>")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("<#=attribute.DisplayName#>")]
		public <#=attribute.ToEntity.DisplayName#> Referencing<#=attribute.DisplayName#>
		{
			get
			{
				return this.GetRelatedEntity<<#=attribute.ToEntity.DisplayName#>>("<#=attribute.DisplayName#>", null);
			}
			set
			{
				this.OnPropertyChanging("Referencing<#=attribute.DisplayName#>");
				this.SetRelatedEntity<<#=attribute.ToEntity.DisplayName#>>("<#=attribute.DisplayName#>", null, value);
				this.OnPropertyChanged("Referencing<#=attribute.DisplayName#>");
			}
		}
<#} //END// N:1 Realationships 

//BEGIN// N:N Realationships 
	foreach(var attribute in entity.RelationshipsManyToMany)	{
#>
		/// <summary>
		/// N:N <#=attribute.DisplayName#>
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("<#=attribute.DisplayName#>")]
		public System.Collections.Generic.IEnumerable<<#=attribute.ToEntity.DisplayName#>> <#=attribute.DisplayName#>
		{
			get
			{
				return this.GetRelatedEntities<<#=attribute.ToEntity.DisplayName#>>("<#=attribute.DisplayName#>", null);
			}
			set
			{
				this.OnPropertyChanging("<#=attribute.DisplayName#>");
				this.SetRelatedEntities<<#=attribute.ToEntity.DisplayName#>>("<#=attribute.DisplayName#>", null, value);
				this.OnPropertyChanged("<#=attribute.DisplayName#>");
			}
		}
<#} //END// N:N Realationships  #>
	}
<#}#>
	

	public partial class XrmServiceContext : Microsoft.Xrm.Sdk.Client.OrganizationServiceContext
	{
		public XrmServiceContext(Microsoft.Xrm.Sdk.IOrganizationService service) : 
				base(service)
		{
		}

<# foreach (var entity in Context.Entities){#>
		public System.Linq.IQueryable<<#=entity.HybridName#>> <#=entity.HybridName#>Set
		{
			get
			{
				return this.CreateQuery<<#=entity.HybridName#>>();
			}
		}
<#}#>
	}
}
