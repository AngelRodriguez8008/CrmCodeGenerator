<#@ output extension=".cs" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]
namespace <#= Context.Namespace #>
{
<# foreach (var entity in Context.Entities)
{
#>
	[EntityLogicalNameAttribute("<#=entity.LogicalName#>")]
	public partial class <#=entity.HybridName#> : Entity
	{
		public <#=entity.HybridName#>()
			: base("<#=entity.LogicalName#>")
		{
		}

		[AttributeLogicalNameAttribute("<#=entity.LogicalName#>id")]
		public override Guid Id
		{
			get { return base.Id; }
			set { <#=entity.PrimaryKey.HybridName#> = value; }
		}

<#
	foreach(var attribute in entity.Fields)	{#>
		[AttributeLogicalNameAttribute("<#=attribute.Attribute.LogicalName#>")]
        public virtual <#=attribute.TargetTypeForCrmSvcUtil#> <#=attribute.HybridName#>
		{
			get { return this.GetAttributeValue<<#=attribute.TargetTypeForCrmSvcUtil#>>("<#=attribute.Attribute.LogicalName#>"); }
			set { this.SetAttributeValue("<#=attribute.Attribute.LogicalName#>", value); }
		}
<#}#>
	}
	public class <#=entity.DisplayName#>Enums
		{
<#foreach(var enm in entity.Enums){#>
			[DataContractAttribute]
			public enum <#=enm.DisplayName#> 
			{
<#foreach(var item in enm.Items){#>
				[EnumMemberAttribute]<#= item.Name #> = <#= item.Value #>,
<#}#>
			}		
<#}#>
		}
		public class <#=entity.DisplayName#>Fields
		{
			public const string SchemaName = "<#=entity.Attribute.LogicalName#>";
			
<#foreach(var f in entity.Fields){#>
			public const string <#=f.DisplayName#> = "<#=f.Attribute.LogicalName#>";
<#}#>
		}
<#}#>




	public partial class XrmServiceContext : Microsoft.Xrm.Sdk.Client.OrganizationServiceContext
	{
		public XrmServiceContext(Microsoft.Xrm.Sdk.IOrganizationService service) : 
				base(service)
		{
		}

<# foreach (var entity in Context.Entities){#>
		public System.Linq.IQueryable<<#=entity.HybridName#>> <#=entity.HybridName#>Set
		{
			get
			{
				return this.CreateQuery<<#=entity.HybridName#>>();
			}
		}
<#}#>
	}
}
