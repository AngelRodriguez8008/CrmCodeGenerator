<#@ output extension=".cs" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]
namespace <#= Context.Namespace #>
{
<# foreach (var entity in Context.Entities)
{
#>
<# if (entity.States != null) { #>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum <#=entity.HybridName#>State
	{
<# foreach (var itm in entity.States.Items) { #>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		<#=itm.Name#> = <#=itm.Value#>,
<#}#>
	}
<#}#>

	[System.Runtime.Serialization.DataContractAttribute()]
	[EntityLogicalNameAttribute("<#=entity.LogicalName#>")]
	public partial class <#=entity.HybridName#> : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		public <#=entity.HybridName#>()
			: base("<#=entity.LogicalName#>")
		{
		}

		public const string EntityLogicalName = "<#=entity.LogicalName#>";
		public const int EntityTypeCode = <#=entity.TypeCode#>;
	
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
	
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}

		[AttributeLogicalNameAttribute("<#=entity.LogicalName#>id")]
		public override Guid Id
		{
			get { return base.Id; }
			set { this.<#=entity.PrimaryKey.DisplayName#> = value; }
		}

<#
	foreach(var attribute in entity.Fields)	{#>
		[AttributeLogicalNameAttribute("<#=attribute.Attribute.LogicalName#>")]
        public <#=attribute.TargetTypeForCrmSvcUtil#> <#=attribute.DisplayName#>
		{
<# if(attribute.IsActivityParty) { #>
			get
			{
				Microsoft.Xrm.Sdk.EntityCollection collection = this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityCollection>("<#=attribute.Attribute.LogicalName#>");
				if (((collection != null) && (collection.Entities != null)))
				{
					return System.Linq.Enumerable.Cast<ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("<#=attribute.Attribute.LogicalName#>");
				if ((value == null))
				{
					this.SetAttributeValue("<#=attribute.Attribute.LogicalName#>", value);
				}
				else
				{
					this.SetAttributeValue("<#=attribute.Attribute.LogicalName#>", new Microsoft.Xrm.Sdk.EntityCollection(new System.Collections.Generic.List<Microsoft.Xrm.Sdk.Entity>(value)));
				}
				this.OnPropertyChanged("<#=attribute.Attribute.LogicalName#>");
			}
<# } else { #>
			get { return this.GetAttributeValue<<#=attribute.TargetTypeForCrmSvcUtil#>>("<#=attribute.Attribute.LogicalName#>"); }
<# if(!entity.IsIntersect || attribute == entity.PrimaryKey) { #>
			set 
			{ 
				this.OnPropertyChanging("<#=attribute.Attribute.LogicalName#>");
				this.SetAttributeValue("<#=attribute.Attribute.LogicalName#>", value); 
<# if(attribute == entity.PrimaryKey) { #>
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
<#}#>
				this.OnPropertyChanged("<#=attribute.Attribute.LogicalName#>");
			}
<#}#>
<#}#>
		}
<#}#>
	}
	public class <#=entity.DisplayName#>Enums
		{
<#foreach(var enm in entity.Enums){#>
			[DataContractAttribute]
			public enum <#=enm.DisplayName#> 
			{
<#foreach(var item in enm.Items){#>
				[EnumMemberAttribute]<#= item.Name #> = <#= item.Value #>,
<#}#>
			}		
<#}#>
		}
		public class <#=entity.DisplayName#>Fields
		{
			public const string SchemaName = "<#=entity.Attribute.LogicalName#>";
			
<#foreach(var f in entity.Fields){#>
			public const string <#=f.DisplayName#> = "<#=f.Attribute.LogicalName#>";
<#}#>
		}
<#}#>
	public partial class XrmServiceContext : Microsoft.Xrm.Sdk.Client.OrganizationServiceContext
	{
		public XrmServiceContext(Microsoft.Xrm.Sdk.IOrganizationService service) : 
				base(service)
		{
		}

<# foreach (var entity in Context.Entities){#>
		public System.Linq.IQueryable<<#=entity.HybridName#>> <#=entity.HybridName#>Set
		{
			get
			{
				return this.CreateQuery<<#=entity.HybridName#>>();
			}
		}
<#}#>
	}
}
